import { LevelQuestions, LevelTopics } from "../types";

export const Languages = ["JavaScript", "TypeScript", "Python", "Java", "Kotlin"];
export const Levels = ["Beginner", "Intermediate", "Advanced"];
export const QuizCounts = [10, 20];

export const BaseQuestions: { [language: string]: LevelQuestions } = {
  javascript: {
    beginner: [
      {
        id: "js-b-1",
        question: "What is the syntax for declaring a variable in JavaScript?",
        options: ["var x = 5", "let x = 5", "const x = 5", "all of the above"],
        correctAnswer: "all of the above",
        topic: "Variables",
      },
      {
        id: "js-b-2",
        question: "What is the purpose of the console.log() function in JavaScript?",
        options: ["To display errors", "To display warnings", "To print output to the console", "To execute code"],
        correctAnswer: "To print output to the console",
        topic: "Console",
      },
      {
        id: "js-b-3",
        question: "What is the difference between null and undefined in JavaScript?",
        options: [
          "null is a number, undefined is a string",
          "null is an object, undefined is a primitive value",
          "null is an intentionally empty value, undefined means a value hasn't been assigned",
          "all of the above",
        ],
        correctAnswer: "null is an intentionally empty value, undefined means a value hasn't been assigned",
        topic: "Data Types",
      },
      {
        id: "js-b-4",
        question: "What is the syntax for creating an array in JavaScript?",
        options: ["var arr = []", "var arr = new Array()", "both of the above", "neither of the above"],
        correctAnswer: "both of the above",
        topic: "Arrays",
      },
      {
        id: "js-b-5",
        question: "What is the purpose of the if statement in JavaScript?",
        options: [
          "To execute code repeatedly",
          "To skip code execution",
          "To execute code conditionally",
          "To declare variables",
        ],
        correctAnswer: "To execute code conditionally",
        topic: "Control Flow",
      },
    ],
    intermediate: [
      {
        id: "js-i-1",
        question: "What is the difference between == and === in JavaScript?",
        options: [
          "== checks for value equality, === checks for type equality",
          "== performs type coercion before comparison, === checks value and type without coercion",
          "== checks for type equality, === checks for value equality",
          "== checks for both value and type equality",
        ],
        correctAnswer: "== performs type coercion before comparison, === checks value and type without coercion",
        topic: "Operators",
      },
      {
        id: "js-i-2",
        question: "What is the purpose of the 'this' keyword in JavaScript?",
        options: [
          "To refer to the global object",
          "To refer to the current function",
          "To refer to the current object",
          "To declare variables",
        ],
        correctAnswer: "To refer to the current object",
        topic: "Functions",
      },
      {
        id: "js-i-3",
        question: "What is the difference between let and const in JavaScript?",
        options: [
          "let is used for constants, const is used for variables",
          "let is used for variables, const is used for constants",
          "let and const are interchangeable",
          "none of the above",
        ],
        correctAnswer: "let is used for variables, const is used for constants",
        topic: "Variables",
      },
      {
        id: "js-i-4",
        question: "What is the purpose of the map() function in JavaScript?",
        options: [
          "To create a new array with transformed values",
          "To filter out values from an array",
          "To sort an array",
          "To reverse an array",
        ],
        correctAnswer: "To create a new array with transformed values",
        topic: "Arrays",
      },
      {
        id: "js-i-5",
        question: "What is the difference between async/await and promises in JavaScript?",
        options: [
          "async/await is used for synchronous code, promises are used for asynchronous code",
          "async/await is used for asynchronous code, promises are used for synchronous code",
          "async/await provides a more synchronous-looking syntax for handling promises",
          "async/await and promises are interchangeable",
        ],
        correctAnswer: "async/await provides a more synchronous-looking syntax for handling promises",
        topic: "Asynchronous Programming",
      },
    ],
    advanced: [
      {
        id: "js-a-1",
        question: "What is the purpose of the Proxy object in JavaScript?",
        options: [
          "To create a new object with the same properties as an existing object",
          "To intercept and modify property access on an object",
          "To create a new function with the same behavior as an existing function",
          "To optimize code execution",
        ],
        correctAnswer: "To intercept and modify property access on an object",
        topic: "Meta Programming",
      },
      {
        id: "js-a-2",
        question: "What is the difference between WeakMap and Map in JavaScript?",
        options: [
          "WeakMap is used for caching, Map is used for data storage",
          "WeakMap is used for data storage, Map is used for caching",
          "WeakMap only accepts objects as keys and allows them to be garbage collected, Map accepts any type as keys",
          "none of the above",
        ],
        correctAnswer:
          "WeakMap only accepts objects as keys and allows them to be garbage collected, Map accepts any type as keys",
        topic: "Data Structures",
      },
      {
        id: "js-a-3",
        question: "What is the purpose of the Symbol type in JavaScript?",
        options: [
          "To create unique property names",
          "To create unique function names",
          "To create unique variable names",
          "To optimize code execution",
        ],
        correctAnswer: "To create unique property names",
        topic: "Data Types",
      },
      {
        id: "js-a-4",
        question: "What is the difference between Object.create() and Object.assign() in JavaScript?",
        options: [
          "Object.create() creates a new object with the same properties as an existing object, Object.assign() copies properties from one object to another",
          "Object.create() copies properties from one object to another, Object.assign() creates a new object with the same properties as an existing object",
          "Object.create() is used for inheritance, Object.assign() is used for composition",
          "none of the above",
        ],
        correctAnswer:
          "Object.create() creates a new object with the same properties as an existing object, Object.assign() copies properties from one object to another",
        topic: "Object Manipulation",
      },
      {
        id: "js-a-5",
        question: "What is the purpose of the Reflect API in JavaScript?",
        options: [
          "To provide a way to inspect and manipulate objects at runtime",
          "To provide a way to optimize code execution",
          "To provide a way to create new objects with the same properties as existing objects",
          "To provide a way to copy properties from one object to another",
        ],
        correctAnswer: "To provide a way to inspect and manipulate objects at runtime",
        topic: "Meta Programming",
      },
    ],
  },
  typescript: {
    beginner: [
      {
        id: "ts-b-1",
        question: "What is the main purpose of TypeScript?",
        options: [
          "To add static typing to JavaScript",
          "To provide a new syntax for JavaScript",
          "To optimize JavaScript code",
          "To create a new programming language",
        ],
        correctAnswer: "To add static typing to JavaScript",
        topic: "Introduction",
      },
      {
        id: "ts-b-2",
        question: "What is the difference between let and const in TypeScript?",
        options: [
          "let is used for constants, const is used for variables",
          "let is used for variables, const is used for constants",
          "let and const are interchangeable",
          "none of the above",
        ],
        correctAnswer: "let is used for variables, const is used for constants",
        topic: "Variables",
      },
      {
        id: "ts-b-3",
        question: "What is the purpose of the interface keyword in TypeScript?",
        options: [
          "To define a new class",
          "To define a new function",
          "To define a new type",
          "To define a new variable",
        ],
        correctAnswer: "To define a new type",
        topic: "Interfaces",
      },
      {
        id: "ts-b-4",
        question: "What is the difference between type and interface in TypeScript?",
        options: [
          "interfaces can be merged and are more extensible, types can unite/intersect and represent any kind of type",
          "type is used for object types, interface is used for primitive types",
          "type and interface are interchangeable",
          "none of the above",
        ],
        correctAnswer:
          "interfaces can be merged and are more extensible, types can unite/intersect and represent any kind of type",
        topic: "Types",
      },
      {
        id: "ts-b-5",
        question: "What is the purpose of the any type in TypeScript?",
        options: [
          "To bypass type checking",
          "To define a new type",
          "To create a new variable",
          "To optimize code execution",
        ],
        correctAnswer: "To bypass type checking",
        topic: "Types",
      },
    ],
    intermediate: [
      {
        id: "ts-i-1",
        question: "What is the purpose of the extends keyword in TypeScript?",
        options: [
          "To inherit from a parent class or to constrain generic types",
          "To implement an interface",
          "To extend a type",
          "To create a new class",
        ],
        correctAnswer: "To inherit from a parent class or to constrain generic types",
        topic: "Classes",
      },
      {
        id: "ts-i-2",
        question: "What is the difference between public and private access modifiers in TypeScript?",
        options: [
          "public is used for private members, private is used for public members",
          "public is used for public members, private is used for private members",
          "public and private are interchangeable",
          "none of the above",
        ],
        correctAnswer: "public is used for public members, private is used for private members",
        topic: "Classes",
      },
      {
        id: "ts-i-3",
        question: "What is the purpose of the readonly keyword in TypeScript?",
        options: [
          "To make a property read-only",
          "To make a property writable",
          "To create a new property",
          "To optimize code execution",
        ],
        correctAnswer: "To make a property read-only",
        topic: "Classes",
      },
      {
        id: "ts-i-4",
        question: "What is the difference between void and never return types in TypeScript?",
        options: [
          "void is used for functions that return no value, never is used for functions that always throw an error",
          "void is used for functions that always throw an error, never is used for functions that return no value",
          "void and never are interchangeable",
          "none of the above",
        ],
        correctAnswer:
          "void is used for functions that return no value, never is used for functions that always throw an error",
        topic: "Functions",
      },
      {
        id: "ts-i-5",
        question: "What is the purpose of the type guard function in TypeScript?",
        options: [
          "To narrow the type of a value",
          "To widen the type of a value",
          "To create a new type",
          "To optimize code execution",
        ],
        correctAnswer: "To narrow the type of a value",
        topic: "Type Guards",
      },
    ],
    advanced: [
      {
        id: "ts-a-1",
        question: "What is the purpose of the conditional types feature in TypeScript?",
        options: [
          "To create conditional logic in type definitions",
          "To create conditional logic in value definitions",
          "To optimize code execution",
          "To create a new type",
        ],
        correctAnswer: "To create conditional logic in type definitions",
        topic: "Advanced Types",
      },
      {
        id: "ts-a-2",
        question: "What is the difference between infer and extends in TypeScript?",
        options: [
          "infer is used to infer the type of a value, extends is used to extend a type",
          "infer is used to extend a type, extends is used to infer the type of a value",
          "infer and extends are interchangeable",
          "none of the above",
        ],
        correctAnswer: "infer is used to infer the type of a value, extends is used to extend a type",
        topic: "Advanced Types",
      },
      {
        id: "ts-a-3",
        question: "What is the purpose of the mapped types feature in TypeScript?",
        options: [
          "To create a new type by mapping over an existing type",
          "To create a new value by mapping over an existing value",
          "To optimize code execution",
          "To create a new type",
        ],
        correctAnswer: "To create a new type by mapping over an existing type",
        topic: "Advanced Types",
      },
      {
        id: "ts-a-4",
        question: "What is the difference between readonly and as const in TypeScript?",
        options: [
          "readonly is used to make a property read-only, as const is used to make a value a constant",
          "readonly is used to make a value a constant, as const is used to make a property read-only",
          "readonly and as const are interchangeable",
          "none of the above",
        ],
        correctAnswer: "readonly is used to make a property read-only, as const is used to make a value a constant",
        topic: "Advanced Types",
      },
      {
        id: "ts-a-5",
        question: "What is the purpose of the branding feature in TypeScript?",
        options: [
          "To add a brand to a type",
          "To add a brand to a value",
          "To optimize code execution",
          "To create a new type",
        ],
        correctAnswer: "To add a brand to a type",
        topic: "Advanced Types",
      },
    ],
  },
  python: {
    beginner: [
      {
        id: "py-b-1",
        question: "What is the correct way to declare a variable in Python?",
        options: ["var x = 5", "x = 5", "let x = 5", "const x = 5"],
        correctAnswer: "x = 5",
        topic: "Variables",
      },
      {
        id: "py-b-2",
        question: "Which of these is the correct way to create a list in Python?",
        options: ["list = (1, 2, 3)", "list = [1, 2, 3]", "list = {1, 2, 3}", "list = <1, 2, 3>"],
        correctAnswer: "list = [1, 2, 3]",
        topic: "Data Structures",
      },
      {
        id: "py-b-3",
        question: "What is the purpose of the print() function in Python?",
        options: [
          "To perform mathematical calculations",
          "To output text or variables to the console",
          "To create a new variable",
          "To import modules",
        ],
        correctAnswer: "To output text or variables to the console",
        topic: "Basic Functions",
      },
      {
        id: "py-b-4",
        question: "What is indentation used for in Python?",
        options: [
          "To make code look neat",
          "To define code blocks and scope",
          "It has no specific purpose",
          "To declare variables",
        ],
        correctAnswer: "To define code blocks and scope",
        topic: "Syntax",
      },
      {
        id: "py-b-5",
        question: "Which operator is used for exponentiation in Python?",
        options: ["^", "**", "^^", "pow()"],
        correctAnswer: "**",
        topic: "Operators",
      },
    ],
    intermediate: [
      {
        id: "py-i-1",
        question: "What is a decorator in Python?",
        options: [
          "A type of variable",
          "A function that modifies another function",
          "A class attribute",
          "A type of loop",
        ],
        correctAnswer: "A function that modifies another function",
        topic: "Decorators",
      },
      {
        id: "py-i-2",
        question: "What is the difference between a tuple and a list in Python?",
        options: [
          "Tuples are mutable, lists are immutable",
          "Tuples are immutable, lists are mutable",
          "There is no difference",
          "Tuples can only store strings",
        ],
        correctAnswer: "Tuples are immutable, lists are mutable",
        topic: "Data Structures",
      },
      {
        id: "py-i-3",
        question: "What is a lambda function in Python?",
        options: ["A named function", "An anonymous function", "A class method", "A built-in function"],
        correctAnswer: "An anonymous function",
        topic: "Functions",
      },
      {
        id: "py-i-4",
        question: "What is the purpose of the __init__ method in Python classes?",
        options: [
          "To initialize class attributes",
          "To delete objects",
          "To create static methods",
          "To import modules",
        ],
        correctAnswer: "To initialize class attributes",
        topic: "Classes",
      },
      {
        id: "py-i-5",
        question: "What is a generator in Python?",
        options: ["A type of loop", "A function that returns an iterator", "A class attribute", "A built-in module"],
        correctAnswer: "A function that returns an iterator",
        topic: "Generators",
      },
    ],
    advanced: [
      {
        id: "py-a-1",
        question: "What is a metaclass in Python?",
        options: [
          "A class that inherits from another class",
          "A class that creates classes",
          "A type of variable",
          "A built-in function",
        ],
        correctAnswer: "A class that creates classes",
        topic: "Metaclasses",
      },
      {
        id: "py-a-2",
        question: "What is the Global Interpreter Lock (GIL) in Python?",
        options: [
          "A security feature",
          "A type of variable scope",
          "A mutex that allows only one thread to execute Python bytecode",
          "A garbage collection mechanism",
        ],
        correctAnswer: "A mutex that allows only one thread to execute Python bytecode",
        topic: "Concurrency",
      },
      {
        id: "py-a-3",
        question: "What is monkey patching in Python?",
        options: [
          "A debugging technique",
          "Modifying classes or modules at runtime",
          "A type of inheritance",
          "A way to optimize code",
        ],
        correctAnswer: "Modifying classes or modules at runtime",
        topic: "Advanced Concepts",
      },
      {
        id: "py-a-4",
        question: "What is the difference between asyncio.gather() and asyncio.wait() in Python?",
        options: [
          "gather() returns results in order, wait() returns as they complete",
          "gather() is for synchronous code, wait() is for asynchronous code",
          "There is no difference",
          "gather() is deprecated",
        ],
        correctAnswer: "gather() returns results in order, wait() returns as they complete",
        topic: "Async Programming",
      },
      {
        id: "py-a-5",
        question: "What is the purpose of the __slots__ attribute in Python?",
        options: [
          "To define class methods",
          "To optimize memory usage by restricting attributes",
          "To create class properties",
          "To define static methods",
        ],
        correctAnswer: "To optimize memory usage by restricting attributes",
        topic: "Memory Management",
      },
    ],
  },
  java: {
    beginner: [
      {
        id: "java-b-1",
        question: "What is the entry point of a Java program?",
        options: ["start()", "main()", "run()", "execute()"],
        correctAnswer: "main()",
        topic: "Basics",
      },
      {
        id: "java-b-2",
        question: "Which keyword is used to create an object in Java?",
        options: ["create", "new", "object", "instance"],
        correctAnswer: "new",
        topic: "Objects",
      },
      {
        id: "java-b-3",
        question: "What is the default value of int data type in Java?",
        options: ["0", "1", "null", "undefined"],
        correctAnswer: "0",
        topic: "Data Types",
      },
      {
        id: "java-b-4",
        question: "Which access modifier makes a variable accessible within the same package?",
        options: ["public", "private", "protected", "default (no modifier)"],
        correctAnswer: "default (no modifier)",
        topic: "Access Modifiers",
      },
      {
        id: "java-b-5",
        question: "What is the purpose of the final keyword in Java?",
        options: ["To make a variable constant", "To end a program", "To create a method", "To import packages"],
        correctAnswer: "To make a variable constant",
        topic: "Keywords",
      },
    ],
    intermediate: [
      {
        id: "java-i-1",
        question: "What is the difference between == and .equals() in Java?",
        options: [
          "== compares references, .equals() compares values",
          "== compares values, .equals() compares references",
          "They are the same",
          "== is for primitives only",
        ],
        correctAnswer: "== compares references, .equals() compares values",
        topic: "Objects",
      },
      {
        id: "java-i-2",
        question: "What is the purpose of the synchronized keyword?",
        options: [
          "To make code faster",
          "To prevent thread interference",
          "To create new threads",
          "To optimize memory usage",
        ],
        correctAnswer: "To prevent thread interference",
        topic: "Multithreading",
      },
      {
        id: "java-i-3",
        question: "What is the difference between ArrayList and LinkedList?",
        options: [
          "ArrayList is faster for random access, LinkedList for insertions/deletions",
          "ArrayList uses less memory",
          "LinkedList is always faster",
          "There is no difference",
        ],
        correctAnswer: "ArrayList is faster for random access, LinkedList for insertions/deletions",
        topic: "Collections",
      },
      {
        id: "java-i-4",
        question: "What is the purpose of the abstract keyword?",
        options: [
          "To create a concrete class",
          "To prevent class instantiation",
          "To create an interface",
          "To define a variable",
        ],
        correctAnswer: "To prevent class instantiation",
        topic: "Classes",
      },
      {
        id: "java-i-5",
        question: "What is method overloading?",
        options: [
          "Having multiple methods with the same name but different parameters",
          "Having multiple classes with the same name",
          "Having multiple packages with the same name",
          "Having multiple variables with the same name",
        ],
        correctAnswer: "Having multiple methods with the same name but different parameters",
        topic: "Methods",
      },
    ],
    advanced: [
      {
        id: "java-a-1",
        question: "What is the purpose of the volatile keyword?",
        options: [
          "To make variables thread-safe",
          "To optimize performance",
          "To create constants",
          "To declare methods",
        ],
        correctAnswer: "To make variables thread-safe",
        topic: "Concurrency",
      },
      {
        id: "java-a-2",
        question: "What is the difference between checked and unchecked exceptions?",
        options: [
          "Checked exceptions must be handled at compile time",
          "Unchecked exceptions must be handled at compile time",
          "There is no difference",
          "Checked exceptions occur at runtime only",
        ],
        correctAnswer: "Checked exceptions must be handled at compile time",
        topic: "Exception Handling",
      },
      {
        id: "java-a-3",
        question: "What is the purpose of the transient keyword?",
        options: [
          "To skip serialization of a variable",
          "To make a variable constant",
          "To create a thread",
          "To optimize performance",
        ],
        correctAnswer: "To skip serialization of a variable",
        topic: "Serialization",
      },
      {
        id: "java-a-4",
        question: "What is the difference between fail-fast and fail-safe iterators?",
        options: [
          "Fail-fast throws exception on concurrent modification, fail-safe doesn't",
          "Fail-safe throws exception on concurrent modification, fail-fast doesn't",
          "There is no difference",
          "Both throw exceptions on concurrent modification",
        ],
        correctAnswer: "Fail-fast throws exception on concurrent modification, fail-safe doesn't",
        topic: "Collections",
      },
      {
        id: "java-a-5",
        question: "What is the purpose of the Java Memory Model?",
        options: [
          "To define how threads interact through memory",
          "To manage garbage collection",
          "To allocate memory for objects",
          "To optimize performance",
        ],
        correctAnswer: "To define how threads interact through memory",
        topic: "Memory Management",
      },
    ],
  },
  kotlin: {
    beginner: [
      {
        id: "kt-b-1",
        question: "What is the difference between var and val in Kotlin?",
        options: [
          "var is mutable, val is immutable",
          "var is immutable, val is mutable",
          "There is no difference",
          "var is for strings only",
        ],
        correctAnswer: "var is mutable, val is immutable",
        topic: "Variables",
      },
      {
        id: "kt-b-2",
        question: "What is a nullable type in Kotlin?",
        options: [
          "A type that can hold null values",
          "A type that cannot be changed",
          "A type for numbers only",
          "A type for strings only",
        ],
        correctAnswer: "A type that can hold null values",
        topic: "Null Safety",
      },
      {
        id: "kt-b-3",
        question: "What is the purpose of the when expression in Kotlin?",
        options: ["To replace switch statements", "To create loops", "To declare variables", "To handle exceptions"],
        correctAnswer: "To replace switch statements",
        topic: "Control Flow",
      },
      {
        id: "kt-b-4",
        question: "What is string interpolation in Kotlin?",
        options: [
          "Embedding expressions inside strings",
          "Concatenating strings",
          "Converting strings to numbers",
          "Splitting strings",
        ],
        correctAnswer: "Embedding expressions inside strings",
        topic: "Strings",
      },
      {
        id: "kt-b-5",
        question: "What is the purpose of the Unit type in Kotlin?",
        options: [
          "To represent no meaningful value",
          "To represent numbers",
          "To represent strings",
          "To represent boolean values",
        ],
        correctAnswer: "To represent no meaningful value",
        topic: "Types",
      },
    ],
    intermediate: [
      {
        id: "kt-i-1",
        question: "What is a data class in Kotlin?",
        options: [
          "A class that automatically implements common methods",
          "A class for storing data only",
          "A class that cannot be inherited",
          "A class for static methods",
        ],
        correctAnswer: "A class that automatically implements common methods",
        topic: "Classes",
      },
      {
        id: "kt-i-2",
        question: "What is the purpose of the companion object?",
        options: [
          "To define static members",
          "To create instance methods",
          "To handle exceptions",
          "To implement interfaces",
        ],
        correctAnswer: "To define static members",
        topic: "Objects",
      },
      {
        id: "kt-i-3",
        question: "What are extension functions in Kotlin?",
        options: [
          "Functions that add functionality to existing classes",
          "Functions that cannot be overridden",
          "Functions that are automatically called",
          "Functions that return Unit",
        ],
        correctAnswer: "Functions that add functionality to existing classes",
        topic: "Functions",
      },
      {
        id: "kt-i-4",
        question: "What is the difference between let and run in Kotlin?",
        options: [
          "let uses 'it', run uses 'this'",
          "let is for null checks only",
          "run is for null checks only",
          "There is no difference",
        ],
        correctAnswer: "let uses 'it', run uses 'this'",
        topic: "Scope Functions",
      },
      {
        id: "kt-i-5",
        question: "What is a sealed class in Kotlin?",
        options: ["A class with restricted inheritance", "A final class", "An abstract class", "A data class"],
        correctAnswer: "A class with restricted inheritance",
        topic: "Classes",
      },
    ],
    advanced: [
      {
        id: "kt-a-1",
        question: "What is a coroutine in Kotlin?",
        options: [
          "A lightweight thread for asynchronous programming",
          "A type of class",
          "A collection type",
          "A way to handle exceptions",
        ],
        correctAnswer: "A lightweight thread for asynchronous programming",
        topic: "Coroutines",
      },
      {
        id: "kt-a-2",
        question: "What is the difference between reified and inline functions?",
        options: [
          "Reified preserves type information, inline copies function body",
          "Reified copies function body, inline preserves type information",
          "There is no difference",
          "Both preserve type information",
        ],
        correctAnswer: "Reified preserves type information, inline copies function body",
        topic: "Functions",
      },
      {
        id: "kt-a-3",
        question: "What is a typealias in Kotlin?",
        options: [
          "An alternative name for an existing type",
          "A way to create new types",
          "A type conversion function",
          "A way to handle null values",
        ],
        correctAnswer: "An alternative name for an existing type",
        topic: "Types",
      },
      {
        id: "kt-a-4",
        question: "What is the purpose of the crossinline modifier?",
        options: [
          "To prevent non-local returns in lambdas",
          "To allow non-local returns in lambdas",
          "To create inline functions",
          "To handle exceptions",
        ],
        correctAnswer: "To prevent non-local returns in lambdas",
        topic: "Functions",
      },
      {
        id: "kt-a-5",
        question: "What is a context receiver in Kotlin?",
        options: [
          "A way to provide multiple receivers to a function",
          "A way to handle exceptions",
          "A type of variable",
          "A way to create coroutines",
        ],
        correctAnswer: "A way to provide multiple receivers to a function",
        topic: "Advanced Features",
      },
    ],
  },
};

export const TopicWeights: { [language: string]: LevelTopics } = {
  javascript: {
    beginner: [
      { topic: "Variables", weight: 0.15 },
      { topic: "DataTypes", weight: 0.15 },
      { topic: "Operators", weight: 0.15 },
      { topic: "ControlFlow", weight: 0.15 },
      { topic: "Functions", weight: 0.15 },
      { topic: "Arrays", weight: 0.15 },
      { topic: "Objects", weight: 0.1 },
    ],
    intermediate: [
      { topic: "Functions", weight: 0.15 },
      { topic: "Objects", weight: 0.15 },
      { topic: "Arrays", weight: 0.15 },
      { topic: "ErrorHandling", weight: 0.1 },
      { topic: "AsyncProgramming", weight: 0.2 },
      { topic: "Modules", weight: 0.1 },
      { topic: "DOM", weight: 0.15 },
    ],
    advanced: [
      { topic: "AsyncProgramming", weight: 0.2 },
      { topic: "DesignPatterns", weight: 0.15 },
      { topic: "Performance", weight: 0.15 },
      { topic: "Security", weight: 0.15 },
      { topic: "Testing", weight: 0.15 },
      { topic: "MetaProgramming", weight: 0.1 },
      { topic: "Memory", weight: 0.1 },
    ],
  },
  typescript: {
    beginner: [
      { topic: "BasicTypes", weight: 0.2 },
      { topic: "Interfaces", weight: 0.2 },
      { topic: "Functions", weight: 0.15 },
      { topic: "Classes", weight: 0.15 },
      { topic: "Enums", weight: 0.15 },
      { topic: "TypeAssertions", weight: 0.15 },
    ],
    intermediate: [
      { topic: "GenericsBasics", weight: 0.2 },
      { topic: "UnionIntersectionTypes", weight: 0.15 },
      { topic: "TypeGuards", weight: 0.15 },
      { topic: "AdvancedInterfaces", weight: 0.15 },
      { topic: "AdvancedClasses", weight: 0.15 },
      { topic: "Decorators", weight: 0.2 },
    ],
    advanced: [
      { topic: "AdvancedGenerics", weight: 0.2 },
      { topic: "ConditionalTypes", weight: 0.15 },
      { topic: "MappedTypes", weight: 0.15 },
      { topic: "UtilityTypes", weight: 0.15 },
      { topic: "TypeInference", weight: 0.15 },
      { topic: "DeclarativePatterns", weight: 0.2 },
    ],
  },
  python: {
    beginner: [
      { topic: "Variables", weight: 0.15 },
      { topic: "DataTypes", weight: 0.15 },
      { topic: "BasicFunctions", weight: 0.15 },
      { topic: "ControlFlow", weight: 0.15 },
      { topic: "DataStructures", weight: 0.15 },
      { topic: "Operators", weight: 0.15 },
      { topic: "Syntax", weight: 0.1 },
    ],
    intermediate: [
      { topic: "Functions", weight: 0.15 },
      { topic: "Classes", weight: 0.15 },
      { topic: "DataStructures", weight: 0.15 },
      { topic: "Decorators", weight: 0.15 },
      { topic: "Generators", weight: 0.15 },
      { topic: "ErrorHandling", weight: 0.15 },
      { topic: "FileIO", weight: 0.1 },
    ],
    advanced: [
      { topic: "Metaclasses", weight: 0.15 },
      { topic: "Concurrency", weight: 0.2 },
      { topic: "AsyncProgramming", weight: 0.2 },
      { topic: "MemoryManagement", weight: 0.15 },
      { topic: "AdvancedConcepts", weight: 0.15 },
      { topic: "Testing", weight: 0.15 },
    ],
  },
  java: {
    beginner: [
      { topic: "Basics", weight: 0.15 },
      { topic: "DataTypes", weight: 0.15 },
      { topic: "Objects", weight: 0.15 },
      { topic: "ControlFlow", weight: 0.15 },
      { topic: "Methods", weight: 0.15 },
      { topic: "Arrays", weight: 0.15 },
      { topic: "Keywords", weight: 0.1 },
    ],
    intermediate: [
      { topic: "Classes", weight: 0.15 },
      { topic: "Inheritance", weight: 0.15 },
      { topic: "Collections", weight: 0.15 },
      { topic: "ExceptionHandling", weight: 0.15 },
      { topic: "Multithreading", weight: 0.2 },
      { topic: "FileIO", weight: 0.1 },
      { topic: "Generics", weight: 0.1 },
    ],
    advanced: [
      { topic: "Concurrency", weight: 0.2 },
      { topic: "MemoryManagement", weight: 0.15 },
      { topic: "Serialization", weight: 0.15 },
      { topic: "Collections", weight: 0.15 },
      { topic: "DesignPatterns", weight: 0.15 },
      { topic: "Testing", weight: 0.1 },
      { topic: "Security", weight: 0.1 },
    ],
  },
  kotlin: {
    beginner: [
      { topic: "Variables", weight: 0.15 },
      { topic: "NullSafety", weight: 0.15 },
      { topic: "ControlFlow", weight: 0.15 },
      { topic: "Functions", weight: 0.15 },
      { topic: "Classes", weight: 0.15 },
      { topic: "Strings", weight: 0.15 },
      { topic: "Types", weight: 0.1 },
    ],
    intermediate: [
      { topic: "Classes", weight: 0.15 },
      { topic: "Objects", weight: 0.15 },
      { topic: "Functions", weight: 0.15 },
      { topic: "Collections", weight: 0.15 },
      { topic: "ScopeFunctions", weight: 0.15 },
      { topic: "Delegation", weight: 0.15 },
      { topic: "Extensions", weight: 0.1 },
    ],
    advanced: [
      { topic: "Coroutines", weight: 0.25 },
      { topic: "Functions", weight: 0.15 },
      { topic: "Types", weight: 0.15 },
      { topic: "FlowAPI", weight: 0.15 },
      { topic: "DSL", weight: 0.15 },
      { topic: "AdvancedFeatures", weight: 0.15 },
    ],
  },
};
